#include <stdio.h>

#define M 1000
#define N 600
#define K 700

// Kernel function to perform matrix multiplication
__global__ void matrixMul(int *a, int *b, int *c, int m, int n, int k) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < m && col < k) {
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += a[row * n + i] * b[i * k + col];
        }
        c[row * k + col] = sum;
    }
}

int main() {
    
    clock_t start_time, end_time;
    double elapsed_time;

    // Record start time
    start_time = clock();

    int a[M][N], b[N][K], c[M][K]; // Input matrices and result matrix
    int *dev_a, *dev_b, *dev_c;    // Device copies of matrices
    int size_a = M * N * sizeof(int); // Size of matrix a in bytes
    int size_b = N * K * sizeof(int); // Size of matrix b in bytes
    int size_c = M * K * sizeof(int); // Size of matrix c in bytes

    // Initialize input matrices with some values
    for (int i = 0; i < M; ++i) {
        for (int j = 0; j < N; ++j) {
            a[i][j] = i + j;
        }
    }

    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < K; ++j) {
            b[i][j] = i - j;
        }
    }


    // Allocate memory on the device
    cudaMalloc((void**)&dev_a, size_a);
    cudaMalloc((void**)&dev_b, size_b);
    cudaMalloc((void**)&dev_c, size_c);

    // Copy input matrices from host (CPU) to device (GPU)
    cudaMemcpy(dev_a, a, size_a, cudaMemcpyHostToDevice);
    cudaMemcpy(dev_b, b, size_b, cudaMemcpyHostToDevice);
    
    dim3 dimBlock(K, M);
    dim3 dimGrid(1, 1);

    // Launch kernel function for matrix multiplication
    matrixMul<<<dimGrid, dimBlock>>>(dev_a, dev_b, dev_c, M, N, K);

    // Copy input matrices from host (CPU) to device (GPU)
    cudaMemcpy(c, dev_c, size_c, cudaMemcpyDeviceToHost);

    // Record end time
    end_time = clock(); 

    // Calculate elapsed time
    elapsed_time = ((double) (end_time - start_time)) / CLOCKS_PER_SEC;

    // Print elapsed time
    printf("Elapsed time: %f seconds\n", elapsed_time);


    // Free device memory
    cudaFree(dev_a);
    cudaFree(dev_b);
    cudaFree(dev_c);

    return 0;
}
